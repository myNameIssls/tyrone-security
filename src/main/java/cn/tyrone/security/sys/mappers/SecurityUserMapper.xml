<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.tyrone.security.sys.dao.SecurityUserMapper">
	<resultMap id="BaseResultMap" type="cn.tyrone.security.sys.bean.SecurityUser">
		<id column="USER_ID" property="userId" jdbcType="VARCHAR" />
		<result column="USER_NAME" property="username" jdbcType="VARCHAR" />
		<result column="PASSWORD" property="password" jdbcType="VARCHAR" />
		<result column="locked" property="locked" />
		<result column="salt" property="salt" />
		
		<collection property="securityRoleList" columnPrefix="sr_" 
			resultMap="cn.tyrone.security.sys.dao.SecurityRoleMapper.BaseResultMap"></collection>
		
		<collection property="securityPermissionList" columnPrefix="sp_" 
		resultMap="cn.tyrone.security.sys.dao.SecurityPermissionMapper.BaseResultMap"></collection>
		
	</resultMap>
	<sql id="Base_Column_List">
		USER_ID, LOGIN_NAME, PASSWORD, STATUS
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from security_user
		where USER_ID = #{userId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		security_user
		where USER_ID = #{userId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="cn.tyrone.security.sys.bean.SecurityUser">
		insert into security_user
		(USER_ID, LOGIN_NAME, PASSWORD,
		STATUS)
		values
		(#{userId,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{status,jdbcType=CHAR})
	</insert>
	<insert id="insertSelective" parameterType="cn.tyrone.security.sys.bean.SecurityUser">
		insert into security_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				USER_ID,
			</if>
			<if test="loginName != null">
				LOGIN_NAME,
			</if>
			<if test="password != null">
				PASSWORD,
			</if>
			<if test="status != null">
				STATUS,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="loginName != null">
				#{loginName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=CHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="cn.tyrone.security.sys.bean.SecurityUser">
		update security_user
		<set>
			<if test="loginName != null">
				LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				PASSWORD = #{password,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				STATUS = #{status,jdbcType=CHAR},
			</if>
		</set>
		where USER_ID = #{userId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="cn.tyrone.security.sys.bean.SecurityUser">
		update
		security_user
		set LOGIN_NAME = #{loginName,jdbcType=VARCHAR},
		PASSWORD =
		#{password,jdbcType=VARCHAR},
		STATUS = #{status,jdbcType=CHAR}
		where
		USER_ID = #{userId,jdbcType=VARCHAR}
	</update>
	
	<!-- 根据用户名获取用户信息 -->
	<select id="getSysUserByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT * FROM security_user t WHERE t.USER_NAME = #{username}
	</select>
	
	<select id="getDataList" parameterType="cn.tyrone.security.sys.bean.SecurityUser" resultMap="BaseResultMap">
			SELECT * FROM security_user t 
	</select>
	
	<!-- 根据用户ID获取用户所有角色 -->
	<select id="getSecurityRoleById" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT 
			su.*,
			sr.`ID` sr_id,
			sr.`ROLE_CODE` sr_role_code,
			sr.`ROLE_NAME` sr_role_name,
			sr.`ROLE_GROUP` sr_role_group,
			sr.`AVAILABLE` sr_available
		FROM security_user su
		INNER JOIN security_user_role ur ON ur.USER_ID = su.USER_ID
		INNER JOIN security_role sr ON sr.`ID` = ur.`ROLE_ID`
		WHERE su.user_id = #{value}
	</select>
	
	<!-- 根据用户ID获取用户所有权限 -->
	<select id="getSecurityPermissionById" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT 
			su.*,
			sp.`ID` sp_id,
			sp.`PERMISSION_NAME` sp_PERMISSION_NAME,
			sp.`PERMISSION_CODE` sp_PERMISSION_CODE,
			sp.`AVAILABLE` sp_available
		FROM security_user su
		INNER JOIN security_user_role ur ON ur.USER_ID = su.USER_ID
		INNER JOIN security_role sr ON sr.`ID` = ur.`ROLE_ID`
		INNER JOIN security_role_permission rp ON rp.role_id = sr.id
		INNER JOIN security_permission sp ON sp.id = rp.permission_id
		WHERE su.`USER_ID` = #{value}
	</select>
	
</mapper>